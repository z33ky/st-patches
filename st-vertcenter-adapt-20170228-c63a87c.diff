diff --git a/st.c b/st.c
index 0f457a7..ba3bcc1 100644
--- a/st.c
+++ b/st.c
@@ -732,7 +732,7 @@ x2col(int x)
 int
 y2row(int y)
 {
-	y -= borderpx;
+	y -= borderpx + xw.cyo;
 	y /= xw.ch;
 
 	return LIMIT(y, 0, term.row-1);
@@ -3335,7 +3335,7 @@ xhints(void)
 	sizeh->flags = PSize | PResizeInc | PBaseSize;
 	sizeh->height = xw.h;
 	sizeh->width = xw.w;
-	sizeh->height_inc = xw.ch;
+	sizeh->height_inc = 0;
 	sizeh->width_inc = xw.cw;
 	sizeh->base_height = 2 * borderpx;
 	sizeh->base_width = 2 * borderpx;
@@ -3497,7 +3497,7 @@ xloadfonts(char *fontstr, double fontsize)
 	/* Setting character width and height. */
 	xw.cw = ceilf(dc.font.width * cwscale);
 	xw.ch = ceilf(dc.font.height * chscale);
-	xw.cyo = ceilf(dc.font.height * (chscale - 1) / 2);
+	xw.cyo = 0;
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
@@ -3685,7 +3685,7 @@ xinit(void)
 int
 xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x, int y)
 {
-	float winx = borderpx + x * xw.cw, winy = borderpx + y * xw.ch, xp, yp;
+	float winx = borderpx + x * xw.cw, winy = borderpx + xw.cyo + y * xw.ch, xp, yp;
 	ushort mode, prevmode = USHRT_MAX;
 	Font *font = &dc.font;
 	int frcflags = FRC_NORMAL;
@@ -3723,7 +3723,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *specs, const Glyph *glyphs, int len, int x
 				font = &dc.bfont;
 				frcflags = FRC_BOLD;
 			}
-			yp = winy + font->ascent + xw.cyo;
+			yp = winy + font->ascent;
 		}
 
 		/* Lookup character index with default font. */
@@ -3818,7 +3818,7 @@ void
 xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, int y)
 {
 	int charlen = len * ((base.mode & ATTR_WIDE) ? 2 : 1);
-	int winx = borderpx + x * xw.cw, winy = borderpx + y * xw.ch,
+	int winx = borderpx + x * xw.cw, winy = borderpx + xw.cyo + y * xw.ch,
 	    width = charlen * xw.cw;
 	Color *fg, *bg, *temp, revfg, revbg, truefg, truebg;
 	XRenderColor colfg, colbg;
@@ -3915,7 +3915,7 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 			((y >= term.row-1)? xw.h : (winy + xw.ch)));
 	}
 	if (y == 0)
-		xclear(winx, 0, winx + width, borderpx);
+		xclear(winx, 0, winx + width, borderpx + xw.cyo);
 	if (y == term.row-1)
 		xclear(winx, winy + xw.ch, winx + width, xw.h);
 
@@ -3934,12 +3934,12 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 
 	/* Render underline and strikethrough. */
 	if (base.mode & ATTR_UNDERLINE) {
-		XftDrawRect(xw.draw, fg, winx, winy + xw.cyo + dc.font.ascent + 1,
+		XftDrawRect(xw.draw, fg, winx, winy + dc.font.ascent + 1,
 				width, 1);
 	}
 
 	if (base.mode & ATTR_STRUCK) {
-		XftDrawRect(xw.draw, fg, winx, winy + xw.cyo + 2 * dc.font.ascent / 3,
+		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.font.ascent / 3,
 				width, 1);
 	}
 
@@ -4026,7 +4026,7 @@ xdrawcursor(void)
 		case 4: /* Steady Underline */
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + curx * xw.cw,
-					borderpx + (term.c.y + 1) * xw.ch - \
+					borderpx + xw.cyo + (term.c.y + 1) * xw.ch - \
 						cursorthickness,
 					xw.cw, cursorthickness);
 			break;
@@ -4034,26 +4034,26 @@ xdrawcursor(void)
 		case 6: /* Steady bar */
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + curx * xw.cw,
-					borderpx + term.c.y * xw.ch,
+					borderpx + xw.cyo + term.c.y * xw.ch,
 					cursorthickness, xw.ch);
 			break;
 		}
 	} else {
 		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
-				borderpx + term.c.y * xw.ch,
+				borderpx + xw.cyo + term.c.y * xw.ch,
 				xw.cw - 1, 1);
 		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
-				borderpx + term.c.y * xw.ch,
+				borderpx + xw.cyo + term.c.y * xw.ch,
 				1, xw.ch - 1);
 		XftDrawRect(xw.draw, &drawcol,
 				borderpx + (curx + 1) * xw.cw - 1,
-				borderpx + term.c.y * xw.ch,
+				borderpx + xw.cyo + term.c.y * xw.ch,
 				1, xw.ch - 1);
 		XftDrawRect(xw.draw, &drawcol,
 				borderpx + curx * xw.cw,
-				borderpx + (term.c.y + 1) * xw.ch - 1,
+				borderpx + xw.cyo + (term.c.y + 1) * xw.ch - 1,
 				xw.cw, 1);
 	}
 	oldx = curx, oldy = term.c.y;
@@ -4324,15 +4324,17 @@ cmessage(XEvent *e)
 void
 cresize(int width, int height)
 {
-	int col, row;
+	int col = term.col, row = term.row;
 
-	if (width != 0)
+	if (width != 0) {
 		xw.w = width;
-	if (height != 0)
+		col = (xw.w - 2 * borderpx) / xw.cw;
+	}
+	if (height != 0) {
 		xw.h = height;
-
-	col = (xw.w - 2 * borderpx) / xw.cw;
-	row = (xw.h - 2 * borderpx) / xw.ch;
+		row = (xw.h - 2 * borderpx) / xw.ch;
+		xw.cyo = (xw.h - xw.ch * row - 2 * borderpx) / 2;
+	}
 
 	tresize(col, row);
 	xresize(col, row);
